/*------------------------------------------------------------------------------
//   This code was generated by template ffi_wrapper.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "ffi_wrapper.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/
{{ $view := . -}}

function test_go_call_cpp(val) {
	return GodotEngine.rtenv['_test_go_call_cpp'](val); 
}

{{- range $i, $f := $view.CollectGDExtensionInterfaceFunctions -}}
{{ $rt := goReturnType .ReturnType }}
function gdspx_{{ snakeCase (trimPrefix $f.Name "GDExtensionSpx") }}(
	{{- range $j, $arg := $f.Arguments -}}
		{{ $arg.Name -}}
		{{- if ne $j (sub (len $f.Arguments) 1) -}}, {{- end -}}
	{{ end -}}
) {
	func =  GodotEngine.rtenv['_gdspx_{{ snakeCase (trimPrefix $f.Name "GDExtensionSpx") }}']; 
	arg0 := (C.{{ $f.Name }})(api.{{ trimPrefix $f.Name "GDExtension" }})
	{{ range $j, $arg := $f.Arguments -}}
		arg{{ add $j 1 }}{{$arg.Type.Primative.Name}} = {{ cgoCastArgument $arg (print "inArg" (add $j 1)) }}
	{{ end -}}

	{{- if $rt -}} ret_val = {{ end }}
	{{ snakeCase ($rt) }}
	func(arg0,
		{{- range $j, $arg := $f.Arguments -}}
			arg{{ add $j 1 }}{{$arg.Type.Primative.Name}}
			{{- if ne $j (sub (len $f.Arguments) 1) -}}, {{- end -}}
		{{- end -}}
		{{ if $rt }} &ret_val{{ end -}}
	)

	{{- if $rt }}
	finalResult = From{{$rt}}(ret_val)
	return finalResult
	{{- end }}
}
{{- end -}}
