
/*------------------------------------------------------------------------------
//   This code was generated by template ffi_gdextension_interface.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "ffi_gdextension_interface.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/
{{ $view := . -}}

package wrap

import (
	"fmt"
	"reflect"
	. "godot-ext/gdspx/internal/ffi"
	. "godot-ext/gdspx/pkg/engine"
)
func BindMgr(mgrs []IManager) {
	for _, mgr := range mgrs {
		switch v := mgr.(type) {
{{- range $i, $name := $view.Mangers }}
		case I{{camelCase $name}}Mgr:
			{{camelCase $name}}Mgr = v
{{ end }}
		default:
			panic(fmt.Sprintf("engine init error : unknown manager type %s", reflect.TypeOf(mgr).String()))
		}
	}
}

{{ range $i, $name := $view.Mangers -}}
type {{$name}}Mgr struct {
	baseMgr
}
{{ end }}

func createMgrs() []IManager {
{{- range $i, $name := $view.Mangers }}
	addManager(&{{$name}}Mgr{})
{{- end }}
	return mgrs
}

// call gdextension interface functions
{{range $i, $f := $view.Ast.CollectGDExtensionInterfaceFunctions -}}
{{ if isManagerMethod $f }}
func {{ getManagerFuncName $f }} {
{{ getManagerFuncBody $f }}
}
{{- end -}}
{{- end -}} 
